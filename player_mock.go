// Code generated by MockGen. DO NOT EDIT.
// Source: sea_battle.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlayer is a mock of Player interface.
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerMockRecorder
}

// MockPlayerMockRecorder is the mock recorder for MockPlayer.
type MockPlayerMockRecorder struct {
	mock *MockPlayer
}

// NewMockPlayer creates a new mock instance.
func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &MockPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer) EXPECT() *MockPlayerMockRecorder {
	return m.recorder
}

// DoMove mocks base method.
func (m *MockPlayer) DoMove(x, y int) (ShotResult, *field) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoMove", x, y)
	ret0, _ := ret[0].(ShotResult)
	ret1, _ := ret[1].(*field)
	return ret0, ret1
}

// DoMove indicates an expected call of DoMove.
func (mr *MockPlayerMockRecorder) DoMove(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoMove", reflect.TypeOf((*MockPlayer)(nil).DoMove), x, y)
}

// GetEnemy mocks base method.
func (m *MockPlayer) GetEnemy() Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnemy")
	ret0, _ := ret[0].(Player)
	return ret0
}

// GetEnemy indicates an expected call of GetEnemy.
func (mr *MockPlayerMockRecorder) GetEnemy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnemy", reflect.TypeOf((*MockPlayer)(nil).GetEnemy))
}

// GetField mocks base method.
func (m *MockPlayer) GetField() *field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField")
	ret0, _ := ret[0].(*field)
	return ret0
}

// GetField indicates an expected call of GetField.
func (mr *MockPlayerMockRecorder) GetField() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockPlayer)(nil).GetField))
}

// GetShot mocks base method.
func (m *MockPlayer) GetShot(x, y int) (ShotResult, *field) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShot", x, y)
	ret0, _ := ret[0].(ShotResult)
	ret1, _ := ret[1].(*field)
	return ret0, ret1
}

// GetShot indicates an expected call of GetShot.
func (mr *MockPlayerMockRecorder) GetShot(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShot", reflect.TypeOf((*MockPlayer)(nil).GetShot), x, y)
}

// GetStepsCount mocks base method.
func (m *MockPlayer) GetStepsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStepsCount indicates an expected call of GetStepsCount.
func (mr *MockPlayerMockRecorder) GetStepsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepsCount", reflect.TypeOf((*MockPlayer)(nil).GetStepsCount))
}

// SetEnemy mocks base method.
func (m *MockPlayer) SetEnemy(p1 Player) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnemy", p1)
}

// SetEnemy indicates an expected call of SetEnemy.
func (mr *MockPlayerMockRecorder) SetEnemy(p1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnemy", reflect.TypeOf((*MockPlayer)(nil).SetEnemy), p1)
}
